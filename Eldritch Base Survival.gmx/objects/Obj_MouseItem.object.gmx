<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Items</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setting Variables
itemtype = item.air;
itemcount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Moving
//Sticking to Cursor
x = mouse_x;
y = mouse_y;

//Drawing Correctly
if (itemcount &gt;= 1)
{
draw_sprite(Spr_Items,itemtype,x,y);
};
if (itemcount &gt; 1)
{
draw_set_colour(c_white);
draw_roundrect(x+21-(string_width(itemcount))-1,y+25-(string_height(itemcount))-1,x+21,y+23,false);
draw_set_colour(c_black);
draw_text(x+21-(string_width(itemcount)),y+10,itemcount);
};

//Finding Target Slot
Invx = Scr_NearestSlotx(mouse_x,mouse_y);
Invy = Scr_NearestSloty(mouse_x,mouse_y);
target = Scr_NearestSlot(Invx,Invy);

//Placing Items
if mouse_check_button_pressed(mb_left) &amp;&amp; ((target.x-(target.sprite_width/2)) &lt; x) &amp;&amp; (x &lt; (target.x+(target.sprite_width/2))) &amp;&amp; ((target.y-(target.sprite_height/2)) &lt; y) &amp;&amp; (y &lt; (target.y+(target.sprite_height/2)))
{
    Invx = Scr_NearestSlotx(mouse_x,mouse_y);
    Invy = Scr_NearestSloty(mouse_x,mouse_y);
        //Checking for Full MouseItem
        if (itemtype != item.air)
        {   
            //Checking for Empty Slot
            if (Obj_Inventory.count[# Invx,Invy] == 0)
            {
                Scr_Inventory_Add(Invx,Invy,itemtype);
                Obj_Inventory.count[# Invx, Invy] = itemcount;
                itemtype = item.air;
                itemcount = 0;
            }
            else
            //Checking for Same Mouse Item Type &amp;&amp; Slot Item Type &amp;&amp; Under Stack size if placed
            if (Obj_Inventory.box[# Invx,Invy] = itemtype) &amp;&amp; (Obj_Inventory.count[# Invx, Invy] &lt;= global.maxstacksize-itemcount)
            {
                Obj_Inventory.count[# Invx,Invy] += itemcount;
                itemtype = item.air;
                itemcount = 0;
            }
            else
            //Checking for Same Mouse Item Type &amp;&amp; Slot Item Type &amp;&amp; Over Stack Size if placed
            if (Obj_Inventory.box[# Invx,Invy] = itemtype) &amp;&amp; (Obj_Inventory.count[# Invx, Invy] &gt; global.maxstacksize-itemcount)
            {
                itemcount -= global.maxstacksize - Obj_Inventory.count[# Invx, Invy];
                Obj_Inventory.count[# Invx,Invy] = global.maxstacksize;
            }
            else
            //Switching MouseItem and Inventory Item
            {
            tempitemtype = Obj_Inventory.box[# Invx,Invy];
            tempitemcount = Obj_Inventory.count[# Invx,Invy];
            Obj_Inventory.box[# Invx,Invy] = itemtype;
            Obj_Inventory.count[# Invx,Invy] = itemcount;
            itemtype = tempitemtype;
            itemcount = tempitemcount;
            };
        }
        //If Empty MouseItem, Picking up stored item
        else
        {
            //Checking for full slot
            if (Obj_Inventory.count[# Invx,Invy] != item.air)
            {
                //Picking up the Item
                removed_item = Scr_Inventory_Remove(Invx,Invy);
                itemtype = removed_item;
                image_index = removed_item;
                itemcount = remove_count;
            };
        };
};
if mouse_check_button_pressed(mb_right) &amp;&amp; ((target.x-(target.sprite_width/2)) &lt; x) &amp;&amp; (x &lt; (target.x+(target.sprite_width/2))) &amp;&amp; ((target.y-(target.sprite_height/2)) &lt; y) &amp;&amp; (y &lt; (target.y+(target.sprite_height/2)))
{
    Invx = Scr_NearestSlotx(mouse_x,mouse_y);
    Invy = Scr_NearestSloty(mouse_x,mouse_y);
        //Checking for Full Slot
        if (Obj_Inventory.count[# Invx,Invy] &gt; 1) &amp;&amp; (itemtype == item.air)
        {
            itemtype = Obj_Inventory.box[# Invx,Invy];
            itemcount = ((Obj_Inventory.count[# Invx,Invy]) div 2)
            Obj_Inventory.count[# Invx,Invy] -= itemcount;
        }
        else
        if (Obj_Inventory.count[# Invx,Invy] = 1) &amp;&amp; (itemtype == item.air)
        {
            itemtype = Obj_Inventory.box[# Invx,Invy];
            itemcount = 1;
            Obj_Inventory.count[# Invx,Invy] = 0;
            Obj_Inventory.box[# Invx,Invy] = item.air;
        };
};













</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
